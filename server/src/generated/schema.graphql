### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""Access token and friends without the user"""
type AccessCredentials {
  expireAt: String!
  token: String!
}

"""Attendance timestamp for logging work hours"""
type Attendance {
  entryAt: String!
  id: ID!
  leaveAt: String
  user: User!
  userId: String!
}

"""Attendance clock in possible outcome"""
union ClockIn = Attendance | UserNotFound

"""Attendance clock out possible outcome"""
union ClockOut = Attendance | NotClockedIn | UserNotFound

"""User credentials"""
input Credentials {
  password: String!
  username: String!
}

"""Result for indicating that the credentials are invalid"""
type InvalidCredentials {
  password: String!
}

"""Result of a log in mutation"""
union LoginResult = InvalidCredentials | UserCredentials | UserNotFound

type Mutation {
  """
  Perform clock in and create a new record (Will not invalidate last un-clocked out record)
  """
  clockIn: ClockIn!

  """Perform clock out if possible"""
  clockOut(id: ID!): ClockOut!

  """Log-in mutation with credentials"""
  login(credential: Credentials!): LoginResult!

  """Refresh token query"""
  refresh: RefreshResult

  """Sign-up mutation with credentials"""
  signup(credential: Credentials!): SignUpResult!
}

"""No token found"""
type NoToken {
  message: String!
}

"""Not yet clocked in"""
type NotClockedIn {
  message: String!
}

type Query {
  """Gettings all employees"""
  employees: [User!]!

  """Get last x attendance records"""
  history(last: Int!): [Attendance!]!

  """Check for user data"""
  me: User

  """Get the last record whether it exist or not"""
  state: Attendance
}

"""Result of refreshing a token"""
union RefreshResult = AccessCredentials | NoToken | UserNotFound

"""Result of a sign up mutation"""
union SignUpResult = InvalidCredentials | UserAlreadyExist | UserCredentials

"""User object type for each employee signed-in"""
type User {
  attendances: [Attendance!]!
  id: ID!
  name: String!
}

"""Result for indicating that user already exists"""
type UserAlreadyExist {
  username: String!
}

"""Wrapper for user with jwt"""
type UserCredentials {
  expireAt: String!
  token: String!
  user: User!
}

"""Result for indicating that no user of that credentials is found"""
type UserNotFound {
  username: String!
}
